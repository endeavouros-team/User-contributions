###############################
######## Grub examples ########
###############################
#
# Here are some example boot menu entries that could be part of /boot/grub/grub.cfg.
# Note that it is probably better to add these into file /boot/grub/custom.cfg,
# so they will not be overwritten by grub updates.

###### An example of how to boot from the EndeavourOS ISO file. ######
#
# This example assumes that the ISO file exists in folder /ISO on a readable partition.
# Note that this syntax is for EndeavourOS ISOs from September 2020.
# Older ISOs are a bit different.
#
menuentry 'Boot endeavouros-2020.09.20-x86_64.iso' {
    set isofile=/ISO/endeavouros-2020.09.20-x86_64.iso
    search --no-floppy --set=root --file $isofile
    probe -u $root --set=uuid
    loopback loop $isofile
    linux (loop)/arch/boot/x86_64/vmlinuz-linux img_dev=/dev/disk/by-uuid/$uuid img_loop=$isofile
    initrd  (loop)/arch/boot/intel-ucode.img (loop)/arch/boot/x86_64/archiso.img
}

###### An example of many Linux entries. ######
#
# This example assumes that all Linux partitions have their LABEL set.
# Find out the labels with command 'lsblk -fm'.
# Edit parition names e.g. with 'gparted' program.
# This example has helper functions 'Label' and 'LI1'.
#
function Label {
  set KERNEL="$1"     # One of: linux linux-lts linux-zen linux-hardened
  set BOOTLABEL="$2"  # Boot partition label
  set ROOTLABEL="$3"  # Root partition label
  set VENDOR="$4"     # Microcode: intel or amd
  set BOOTDIR=""
  set UCODE=""
  if [ "$ROOTLABEL" = "" ] ; then
     set ROOTLABEL="$BOOTLABEL"
     set BOOTDIR=/boot
  fi
  if [ "$VENDOR" != "" ] ; then
     set UCODE="$BOOTDIR/$VENDOR"-ucode.img
  fi
  savedefault
  search --set --label "$BOOTLABEL"
  linux  "$BOOTDIR/vmlinuz-$KERNEL"  root=LABEL="$ROOTLABEL" rw loglevel=3 quiet nowatchdog
  initrd "$UCODE" "$BOOTDIR/initramfs-$KERNEL.img"
}
function LI1 {
  # Like 'Label' but simpler: /boot inside / and microcode is intel 
  set KERNEL="$1"
  set BOOTLABEL="$2"
  set ROOTLABEL=""
  set VENDOR="intel"
  Label "$KERNEL" "$BOOTLABEL" "$ROOTLABEL" "$VENDOR"
}
# Now the actual 6 boot menu menu entries:
menuentry 'EndeavourOS linux     l1' { LI1 linux     EndeavourOS ; }
menuentry '            linux-lts l2' { LI1 linux-lts EndeavourOS ; }
menuentry 'Arch        linux     l3' { LI1 linux     Arch ; }
menuentry '            linux-lts l4' { LI1 linux-lts Arch ; }
menuentry 'Antergos    linux     l5' { LI1 linux     Antergos ; }
menuentry '            linux-lts l6' { LI1 linux-lts Antergos ; }

###### An example for Windows 10. ######
#
# This example has helper functions 'Windows10' and 'Win10'.
#
function Windows10 {
  set EFIFILE="$1"
  set EFIHINT="$2"
  if [ "$EFIHINT" != "" ] ; then
     set EFIHINT="--hint-efi=$EFIHINT"
  fi
  savedefault
  search --no-floppy --set=root --file "$EFIFILE" $EFIHINT
  chainloader "$EFIFILE"
}
function Win10 {
  set EFIHINT="$1"
  Windows10 /EFI/Microsoft/Boot/bootmgfw.efi "$EFIHINT"
}
# Now the Windows10 entries.
menuentry 'Windows10 EFI w1' { Win10 ; }
menuentry 'Windows10 EFI w2' { Win10 hd3,gpt2 ; }  # disk and partition hints
#
# You may be wondering what are those silly looking markings:
# l1, l2, ... and w1, w2, ... in the entry names above.
# Note that we use function 'savedefault'. Grub seems to require that the last
# part of the entry name is unique in order for 'savedefault' to work.
# So those small markings make the entry names unique!

# Then some potentially useful extra entries!
# What do these menu entries do? Find out as your home exercise! ;-)
#
menuentry 'Shutdown' { halt ; }
menuentry 'Restart'  { reboot ; }
